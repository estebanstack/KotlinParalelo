import java.util.concurrent.ForkJoinPool
import java.util.concurrent.RecursiveTask
import kotlin.system.measureTimeMillis

class SumTask(private val numbers: List<Int>) : RecursiveTask<Int>() {
    override fun compute(): Int {
        return if (numbers.size <= 10_000) {
            numbers.sum()
        } else {
            val mid = numbers.size / 2
            val leftTask = SumTask(numbers.subList(0, mid))
            val rightTask = SumTask(numbers.subList(mid, numbers.size))
            leftTask.fork()
            rightTask.compute() + leftTask.join()
        }
    }
}

fun main() {
    val numbers = List(1_000_000) { (1..10).random() }

    // Tiempo de ejecuci贸n original
    val timeOriginal = measureTimeMillis {
        println("Suma total (original): ${sumList(numbers)}")
    }
    println("Tiempo de ejecuci贸n (original): $timeOriginal ms")

    // Tiempo de ejecuci贸n con ForkJoinPool
    val pool = ForkJoinPool()
    val timeForkJoin = measureTimeMillis {
        val result = pool.invoke(SumTask(numbers))
        println("Suma total (ForkJoinPool): $result")
    }
    println("Tiempo de ejecuci贸n (ForkJoinPool): $timeForkJoin ms")
}

fun sumList(numbers: List<Int>): Int {
    var sum = 0
    for (number in numbers) {
        sum += number
    }
    return sum
}
